const envVars = [
  "PORT",
  "DB_NAME",
  "DB_PORT",
  "DB_LOCAL",
  "DB_HOST",
  "DB_MAINTENANCE",
  "POSTGRES_USER",
  "POSTGRES_PASSWORD",
  "PGADMIN_DEFAULT_EMAIL",
  "PGADMIN_DEFAULT_PASSWORD",
  "PG_PORT",
  "SESSION_SECRET",
  "EMAIL_USER",
  "EMAIL_PASS",
  "FRONTEND_URL",
  "EMAIL_FROM",
  "GMAIL_APP_PASSWORD",
  "DB_TEST_NAME",
  "DB_LOCAL_AZURE",
  "POSTGRES_DEPLOY_PASSWORD",
] as const;

// Validates that env variables exists
for (const varName of envVars) {
  if (!Bun.env[varName]) {
    throw new Error(`Missing env variable: ${varName}`);
  }
}

const {
  PORT,
  DB_NAME,
  DB_PORT,
  DB_LOCAL,
  DB_HOST,
  DB_MAINTENANCE,
  POSTGRES_USER,
  POSTGRES_PASSWORD,
  PGADMIN_DEFAULT_EMAIL,
  PGADMIN_DEFAULT_PASSWORD,
  PG_PORT,
  SESSION_SECRET,
  EMAIL_USER,
  EMAIL_PASS,
  FRONTEND_URL,
  EMAIL_FROM,
  GMAIL_APP_PASSWORD,
  DB_TEST_NAME,
  DB_LOCAL_AZURE,
  POSTGRES_DEPLOY_PASSWORD,
} = Bun.env;
const DB_URL = `postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_LOCAL}:${DB_PORT}/${DB_NAME}`;
const DB_TEST_URL = `postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_LOCAL}:${DB_PORT}/${DB_TEST_NAME}`;

let DATABASE_URL = Bun.env.NODE_ENV === "test" ? DB_TEST_URL : DB_URL;
if (Bun.env.NODE_ENV === "production") {
  DATABASE_URL = `postgres://${POSTGRES_USER}:${POSTGRES_DEPLOY_PASSWORD}@${DB_LOCAL_AZURE}:${DB_PORT}/${DB_NAME}`;
}

export const config = {
  PORT,
  DB_NAME,
  DB_PORT,
  DB_LOCAL,
  DB_HOST,
  DB_MAINTENANCE,
  POSTGRES_USER,
  POSTGRES_PASSWORD,
  PGADMIN_DEFAULT_EMAIL,
  PGADMIN_DEFAULT_PASSWORD,
  PG_PORT,
  DATABASE_URL,
  SESSION_SECRET,
  EMAIL_USER,
  EMAIL_PASS,
  FRONTEND_URL,
  EMAIL_FROM,
  GMAIL_APP_PASSWORD,
  DB_LOCAL_AZURE,
  POSTGRES_DEPLOY_PASSWORD,
};
